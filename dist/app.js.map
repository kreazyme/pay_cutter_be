{"version":3,"sources":["../src/app.ts"],"sourcesContent":["import 'reflect-metadata';\r\nimport cookieParser from 'cookie-parser';\r\nimport cors from 'cors';\r\nimport express from 'express';\r\nimport helmet from 'helmet';\r\nimport hpp from 'hpp';\r\nimport morgan from 'morgan';\r\nimport compression from 'compression';\r\nimport swaggerUi from 'swagger-ui-express';\r\nimport swaggerJSDoc from 'swagger-jsdoc';\r\nimport { createConnection } from 'typeorm';\r\nimport { NODE_ENV, PORT, LOG_FORMAT, ORIGIN, CREDENTIALS } from '@config';\r\nimport { Routes } from '@interfaces/routes.interface';\r\nimport { ErrorMiddleware } from '@middlewares/error.middleware';\r\nimport { logger, stream } from '@utils/logger';\r\nimport { dbConnection } from './database';\r\n\r\nexport class App {\r\n  public app: express.Application;\r\n  public env: string;\r\n  public port: string | number;\r\n\r\n  constructor(routes: Routes[]) {\r\n    this.app = express();\r\n    this.env = NODE_ENV || 'development';\r\n    this.port = PORT || 80;\r\n\r\n    this.connectToDatabase();\r\n    this.initializeMiddlewares();\r\n    this.initializeRoutes(routes);\r\n    this.initializeSwagger();\r\n    this.initializeErrorHandling();\r\n  }\r\n  \r\n  public listen() {\r\n    this.app.listen(this.port, () => {\r\n      logger.info(`=================================`);\r\n      logger.info(`======= ENV: ${this.env} =======`);\r\n      logger.info(`ðŸš€ App listening on the port ${this.port}`);\r\n      logger.info(`=================================`);\r\n    });\r\n  }\r\n\r\n  public getServer() {\r\n    return this.app;\r\n  }\r\n\r\n  private async connectToDatabase() {\r\n    try{\r\n      await createConnection(dbConnection)\r\n    }\r\n    catch(e){\r\n      console.log(e)\r\n    }\r\n  }\r\n\r\n  private initializeMiddlewares() {\r\n    this.app.use(morgan(LOG_FORMAT, { stream }));\r\n    this.app.use(cors({ origin: ORIGIN, credentials: CREDENTIALS }));\r\n    this.app.use(hpp());\r\n    this.app.use(helmet());\r\n    this.app.use(compression());\r\n    this.app.use(express.json());\r\n    this.app.use(express.urlencoded({ extended: true }));\r\n    this.app.use(cookieParser());\r\n  }\r\n\r\n  private initializeRoutes(routes: Routes[]) {\r\n    routes.forEach(route => {\r\n      this.app.use('/', route.router);\r\n    });\r\n  }\r\n\r\n  private initializeSwagger() {\r\n    const options = {\r\n      swaggerDefinition: {\r\n        info: {\r\n          title: 'REST API',\r\n          version: '1.0.0',\r\n          description: 'Example docs',\r\n        },\r\n      },\r\n      apis: ['swagger.yaml'],\r\n    };\r\n\r\n    const specs = swaggerJSDoc(options);\r\n    this.app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(specs));\r\n  }\r\n\r\n  private initializeErrorHandling() {\r\n    this.app.use(ErrorMiddleware);\r\n  }\r\n}\r\n"],"names":["App","listen","app","port","logger","info","env","getServer","connectToDatabase","createConnection","dbConnection","e","console","log","initializeMiddlewares","use","morgan","LOG_FORMAT","stream","cors","origin","ORIGIN","credentials","CREDENTIALS","hpp","helmet","compression","express","json","urlencoded","extended","cookieParser","initializeRoutes","routes","forEach","route","router","initializeSwagger","options","swaggerDefinition","title","version","description","apis","specs","swaggerJSDoc","swaggerUi","serve","setup","initializeErrorHandling","ErrorMiddleware","constructor","NODE_ENV","PORT"],"mappings":"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"}