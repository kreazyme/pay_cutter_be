{"version":3,"sources":["../../src/test/users.test.ts"],"sourcesContent":["import bcrypt from 'bcrypt';\r\nimport request from 'supertest';\r\nimport { createConnection, getConnection, Repository } from 'typeorm';\r\nimport { App } from '@/app';\r\nimport { dbConnection } from '@databases';\r\nimport { CreateUserDto } from '@dtos/users.dto';\r\nimport { UserEntity } from '@entities/users.entity';\r\nimport { UserRoute } from '@routes/users.route';\r\n\r\n// beforeAll(async () => {\r\n//   await createConnection(dbConnection);\r\n// });\r\n\r\nafterAll(async () => {\r\n  await getConnection().close();\r\n});\r\n\r\ndescribe('Testing Users', () => {\r\n  describe('[POST] /users', () => {\r\n    it('response Create user', async () => {\r\n      const userData: CreateUserDto = {\r\n        email: 'test@email.com',\r\n        password: 'q1w2e3r4!',\r\n      };\r\n\r\n      const usersRoute = new UserRoute();\r\n      const userRepository = new Repository<UserEntity>();\r\n\r\n      userRepository.findOne = jest.fn().mockReturnValue(null);\r\n      userRepository.save = jest.fn().mockReturnValue({\r\n        id: 1,\r\n        email: userData.email,\r\n        password: await bcrypt.hash(userData.password, 10),\r\n      });\r\n\r\n      const app = new App([usersRoute]);\r\n      return request(app.getServer()).post(`${usersRoute.path}`).send(userData).expect(201);\r\n    });\r\n  });\r\n\r\n  describe('[GET] /users', () => {\r\n    it('response findAll users', async () => {\r\n      const usersRoute = new UserRoute();\r\n      const userRepository = new Repository<UserEntity>();\r\n\r\n      userRepository.find = jest.fn().mockReturnValue([\r\n        {\r\n          id: 1,\r\n          email: 'a@email.com',\r\n          password: await bcrypt.hash('q1w2e3r4!', 10),\r\n        },\r\n        {\r\n          id: 2,\r\n          email: 'b@email.com',\r\n          password: await bcrypt.hash('a1s2d3f4!', 10),\r\n        },\r\n        {\r\n          id: 3,\r\n          email: 'c@email.com',\r\n          password: await bcrypt.hash('z1x2c3v4!', 10),\r\n        },\r\n      ]);\r\n\r\n      const app = new App([usersRoute]);\r\n      return request(app.getServer()).get(`${usersRoute.path}`).expect(200);\r\n    });\r\n  });\r\n\r\n  describe('[GET] /users/:id', () => {\r\n    it('response findOne user', async () => {\r\n      const userId = 1;\r\n\r\n      const usersRoute = new UserRoute();\r\n      const userRepository = new Repository<UserEntity>();\r\n\r\n      userRepository.findOne = jest.fn().mockReturnValue({\r\n        id: userId,\r\n        email: 'a@email.com',\r\n        password: await bcrypt.hash('q1w2e3r4!', 10),\r\n      });\r\n\r\n      const app = new App([usersRoute]);\r\n      return request(app.getServer()).get(`${usersRoute.path}/${userId}`).expect(200);\r\n    });\r\n  });\r\n\r\n  describe('[PUT] /users/:id', () => {\r\n    it('response Update user', async () => {\r\n      const userId = 1;\r\n      const userData: CreateUserDto = {\r\n        email: 'test@email.com',\r\n        password: '1q2w3e4r!',\r\n      };\r\n\r\n      const usersRoute = new UserRoute();\r\n      const userRepository = new Repository<UserEntity>();\r\n\r\n      userRepository.findOne = jest.fn().mockReturnValue({\r\n        id: userId,\r\n        email: userData.email,\r\n        password: await bcrypt.hash(userData.password, 10),\r\n      });\r\n      userRepository.update = jest.fn().mockReturnValue({\r\n        generatedMaps: [],\r\n        raw: [],\r\n        affected: 1,\r\n      });\r\n      userRepository.findOne = jest.fn().mockReturnValue({\r\n        id: userId,\r\n        email: userData.email,\r\n        password: await bcrypt.hash(userData.password, 10),\r\n      });\r\n\r\n      const app = new App([usersRoute]);\r\n      return request(app.getServer()).put(`${usersRoute.path}/${userId}`).send(userData).expect(200);\r\n    });\r\n  });\r\n\r\n  describe('[DELETE] /users/:id', () => {\r\n    it('response Delete user', async () => {\r\n      const userId = 1;\r\n\r\n      const usersRoute = new UserRoute();\r\n      const userRepository = new Repository<UserEntity>();\r\n\r\n      userRepository.findOne = jest.fn().mockReturnValue({\r\n        id: userId,\r\n        email: 'a@email.com',\r\n        password: await bcrypt.hash('q1w2e3r4!', 10),\r\n      });\r\n\r\n      const app = new App([usersRoute]);\r\n      return request(app.getServer()).delete(`${usersRoute.path}/${userId}`).expect(200);\r\n    });\r\n  });\r\n});\r\n"],"names":["afterAll","getConnection","close","describe","it","userData","email","password","usersRoute","UserRoute","userRepository","Repository","findOne","jest","fn","mockReturnValue","save","id","bcrypt","hash","app","App","request","getServer","post","path","send","expect","find","get","userId","update","generatedMaps","raw","affected","put","delete"],"mappings":"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"}