{"version":3,"sources":["../../src/controllers/expense.controller.ts"],"sourcesContent":["import { NextFunction, Request, Response } from 'express';\r\nimport { Container } from 'typedi';\r\nimport { RequestWithUser } from '@interfaces/auth.interface';\r\nimport { ExpenseService } from '@/services/expense.service';\r\nimport { ExpenseEntity } from '@/entities/expense.entity';\r\n\r\n\r\nexport class ExpenseController {\r\n    public expense = Container.get(ExpenseService)\r\n\r\n    public createExpense = async (\r\n        req: RequestWithUser,\r\n        res: Response,\r\n        next: NextFunction,\r\n    ): Promise<void> => {\r\n        try {\r\n            const userID :number = req.user.id;\r\n            const findExpense: ExpenseEntity = await this.expense.createExpense(\r\n                req.body.name,\r\n                req.body.description,\r\n                req.body.amount,\r\n                req.body.paidBy,\r\n                req.body.groupId,\r\n                req.body.participants,\r\n                userID,\r\n                req.body.imageURL,\r\n            );\r\n            res.status(201).json({ data: findExpense, message: \"created\" });\r\n        }\r\n        catch (error) {\r\n            next(error);\r\n        }\r\n    }\r\n\r\n    public findExpense = async (\r\n        req: RequestWithUser,\r\n        res: Response,\r\n        next: NextFunction,\r\n    ): Promise<void> => {\r\n        try {\r\n            const expenseID: number = Number(req.params.id);\r\n            const findExpense: ExpenseEntity = await this.expense.findExpense(expenseID);\r\n            res.status(200).json({ data: findExpense, message: \"ok\" });\r\n        }\r\n        catch (error) {\r\n            next(error);\r\n        }\r\n    }\r\n\r\n    public getExpensesByGroup = async (\r\n        req: RequestWithUser,\r\n        res: Response,\r\n        next: NextFunction,\r\n    ): Promise<void> => {\r\n        try {\r\n            const groupID: number = Number(req.params.id);\r\n            const findExpenses: ExpenseEntity[] = await this.expense.getExpensesByGroup(groupID);\r\n            res.status(200).json({ data: findExpenses, message: \"ok\" });\r\n        }\r\n        catch (error) {\r\n            next(error);\r\n        }\r\n    }\r\n\r\n    public updateExpense = async (\r\n        req: RequestWithUser,\r\n        res: Response,\r\n        next: NextFunction,\r\n    ): Promise<void> => {\r\n        try {\r\n            console.log('updateExpense')\r\n            const expenseID: number = Number(req.params.id);\r\n            const findExpense: ExpenseEntity = await this.expense.updateExpense(\r\n                expenseID,\r\n                req.body.name,\r\n                req.body.description,\r\n                req.body.amount,\r\n                req.body.paidBy,\r\n                req.body.groupId,\r\n                req.body.participants,\r\n                req.body.createdBy,\r\n                req.body.imageURL,\r\n            );\r\n            res.status(200).json({ data: findExpense, message: \"updated\" });\r\n        }\r\n        catch (error) {\r\n            next(error);\r\n        }\r\n    }\r\n}"],"names":["ExpenseController","expense","Container","get","ExpenseService","createExpense","req","res","next","userID","user","id","findExpense","body","name","description","amount","paidBy","groupId","participants","imageURL","status","json","data","message","error","expenseID","Number","params","getExpensesByGroup","groupID","findExpenses","updateExpense","console","log","createdBy"],"mappings":";;;;+BAOaA;;aAAAA;;wBANa;gCAEK;;;;;;;;;;;;;;AAIxB,IAAA,AAAMA,oBAAN,MAAMA;;QACT,uBAAOC,WAAUC,iBAAS,CAACC,GAAG,CAACC,8BAAc;QAE7C,uBAAOC,iBAAgB,OACnBC,KACAC,KACAC,OACgB;YAChB,IAAI;gBACA,MAAMC,SAAiBH,IAAII,IAAI,CAACC,EAAE;gBAClC,MAAMC,cAA6B,MAAM,IAAI,CAACX,OAAO,CAACI,aAAa,CAC/DC,IAAIO,IAAI,CAACC,IAAI,EACbR,IAAIO,IAAI,CAACE,WAAW,EACpBT,IAAIO,IAAI,CAACG,MAAM,EACfV,IAAIO,IAAI,CAACI,MAAM,EACfX,IAAIO,IAAI,CAACK,OAAO,EAChBZ,IAAIO,IAAI,CAACM,YAAY,EACrBV,QACAH,IAAIO,IAAI,CAACO,QAAQ;gBAErBb,IAAIc,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEC,MAAMX;oBAAaY,SAAS;gBAAU;YACjE,EACA,OAAOC,OAAO;gBACVjB,KAAKiB;YACT;QACJ;QAEA,uBAAOb,eAAc,OACjBN,KACAC,KACAC,OACgB;YAChB,IAAI;gBACA,MAAMkB,YAAoBC,OAAOrB,IAAIsB,MAAM,CAACjB,EAAE;gBAC9C,MAAMC,cAA6B,MAAM,IAAI,CAACX,OAAO,CAACW,WAAW,CAACc;gBAClEnB,IAAIc,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEC,MAAMX;oBAAaY,SAAS;gBAAK;YAC5D,EACA,OAAOC,OAAO;gBACVjB,KAAKiB;YACT;QACJ;QAEA,uBAAOI,sBAAqB,OACxBvB,KACAC,KACAC,OACgB;YAChB,IAAI;gBACA,MAAMsB,UAAkBH,OAAOrB,IAAIsB,MAAM,CAACjB,EAAE;gBAC5C,MAAMoB,eAAgC,MAAM,IAAI,CAAC9B,OAAO,CAAC4B,kBAAkB,CAACC;gBAC5EvB,IAAIc,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEC,MAAMQ;oBAAcP,SAAS;gBAAK;YAC7D,EACA,OAAOC,OAAO;gBACVjB,KAAKiB;YACT;QACJ;QAEA,uBAAOO,iBAAgB,OACnB1B,KACAC,KACAC,OACgB;YAChB,IAAI;gBACAyB,QAAQC,GAAG,CAAC;gBACZ,MAAMR,YAAoBC,OAAOrB,IAAIsB,MAAM,CAACjB,EAAE;gBAC9C,MAAMC,cAA6B,MAAM,IAAI,CAACX,OAAO,CAAC+B,aAAa,CAC/DN,WACApB,IAAIO,IAAI,CAACC,IAAI,EACbR,IAAIO,IAAI,CAACE,WAAW,EACpBT,IAAIO,IAAI,CAACG,MAAM,EACfV,IAAIO,IAAI,CAACI,MAAM,EACfX,IAAIO,IAAI,CAACK,OAAO,EAChBZ,IAAIO,IAAI,CAACM,YAAY,EACrBb,IAAIO,IAAI,CAACsB,SAAS,EAClB7B,IAAIO,IAAI,CAACO,QAAQ;gBAErBb,IAAIc,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEC,MAAMX;oBAAaY,SAAS;gBAAU;YACjE,EACA,OAAOC,OAAO;gBACVjB,KAAKiB;YACT;QACJ;;AACJ"}