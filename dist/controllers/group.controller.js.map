{"version":3,"sources":["../../src/controllers/group.controller.ts"],"sourcesContent":["import { GroupEntity } from \"@/entities/group.entity\";\r\nimport { RequestWithUser } from \"@/interfaces/auth.interface\";\r\nimport { User } from \"@/interfaces/users.interface\";\r\nimport { GroupService } from \"@/services/group.service\";\r\nimport { NextFunction, Request, Response } from \"express\";\r\nimport Container from \"typedi\";\r\n\r\nexport class GroupController{\r\n    public group = Container.get(GroupService)\r\n\r\n    public getMyGroups = async (req: RequestWithUser, res: Response, next: NextFunction): Promise<void> => {\r\n        try{\r\n            const userID = req.user.id;\r\n            const findMyGroups: GroupEntity[] = await this.group.findMyGroups(userID);\r\n            res.status(200).json({data: findMyGroups, message: \"findAll\"});\r\n        }catch(error){\r\n            next(error);\r\n        }\r\n    }\r\n\r\n    public getGroupById = async (req: RequestWithUser, res: Response, next: NextFunction): Promise<void> => {\r\n        try{\r\n            const groupID = Number(req.params.id);\r\n            const userID = req.user.id;\r\n            const findGroupById: GroupEntity = await this.group.findGroupById(groupID, userID,);\r\n            res.status(200).json({data: findGroupById, message: \"findOne\"});\r\n        }catch(error){\r\n            next(error);\r\n        }\r\n    }\r\n\r\n    public createGroup = async (req: RequestWithUser, res: Response, next: NextFunction): Promise<void> => {\r\n        try{\r\n            const name = req.body.name;\r\n            const description = req.body.description;\r\n            const user : User = req.user;\r\n            const newGroup: GroupEntity = await this.group.createGroup(name, user, description);\r\n            res.status(201).json({data: newGroup, message: \"created\"});\r\n        }catch(error){\r\n            next(error);\r\n        }\r\n    }\r\n\r\n    public leaveGroup = async (req: RequestWithUser, res: Response, next: NextFunction): Promise<void> => {\r\n        try{\r\n            const groupID = Number(req.body.id);\r\n            const userID = req.user.id;\r\n            const findGroup: GroupEntity = await this.group.leaveGroup(groupID, userID);\r\n            res.status(200).json({data: findGroup, message: \"left\"});\r\n        }catch(error){\r\n            next(error);\r\n        }\r\n    }\r\n\r\n    public joinGroup = async (req: RequestWithUser, res: Response, next: NextFunction): Promise<void> => {\r\n        try{\r\n            const code = req.body.joinCode;\r\n            const userID = req.user.id;\r\n            const findGroup: GroupEntity = await this.group.joinGroup(code, userID);\r\n            res.status(200).json({data: findGroup, message: \"joined\"});\r\n        }catch(error){\r\n            next(error);\r\n        }\r\n    }\r\n\r\n    public shareGroup = async (req: RequestWithUser, res: Response, next: NextFunction): Promise<void> => {\r\n        try{\r\n            const groupID = Number(req.params.id);\r\n            const userID = req.user.id;\r\n            const joinCode: string = await this.group.shareGroup(groupID, userID);\r\n            res.status(200).json({ data: joinCode, message: \"shared\"});\r\n        }catch(error){\r\n            next(error);\r\n        }\r\n    }\r\n}"],"names":["GroupController","group","Container","get","GroupService","getMyGroups","req","res","next","userID","user","id","findMyGroups","status","json","data","message","error","getGroupById","groupID","Number","params","findGroupById","createGroup","name","body","description","newGroup","leaveGroup","findGroup","joinGroup","code","joinCode","shareGroup"],"mappings":";;;;+BAOaA;;aAAAA;;8BAJgB;iDAEP;;;;;;;;;;;;;;;;;;;AAEf,IAAA,AAAMA,kBAAN,MAAMA;;QACT,uBAAOC,SAAQC,eAAS,CAACC,GAAG,CAACC,0BAAY;QAEzC,uBAAOC,eAAc,OAAOC,KAAsBC,KAAeC,OAAsC;YACnG,IAAG;gBACC,MAAMC,SAASH,IAAII,IAAI,CAACC,EAAE;gBAC1B,MAAMC,eAA8B,MAAM,IAAI,CAACX,KAAK,CAACW,YAAY,CAACH;gBAClEF,IAAIM,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAACC,MAAMH;oBAAcI,SAAS;gBAAS;YAChE,EAAC,OAAMC,OAAM;gBACTT,KAAKS;YACT;QACJ;QAEA,uBAAOC,gBAAe,OAAOZ,KAAsBC,KAAeC,OAAsC;YACpG,IAAG;gBACC,MAAMW,UAAUC,OAAOd,IAAIe,MAAM,CAACV,EAAE;gBACpC,MAAMF,SAASH,IAAII,IAAI,CAACC,EAAE;gBAC1B,MAAMW,gBAA6B,MAAM,IAAI,CAACrB,KAAK,CAACqB,aAAa,CAACH,SAASV;gBAC3EF,IAAIM,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAACC,MAAMO;oBAAeN,SAAS;gBAAS;YACjE,EAAC,OAAMC,OAAM;gBACTT,KAAKS;YACT;QACJ;QAEA,uBAAOM,eAAc,OAAOjB,KAAsBC,KAAeC,OAAsC;YACnG,IAAG;gBACC,MAAMgB,OAAOlB,IAAImB,IAAI,CAACD,IAAI;gBAC1B,MAAME,cAAcpB,IAAImB,IAAI,CAACC,WAAW;gBACxC,MAAMhB,OAAcJ,IAAII,IAAI;gBAC5B,MAAMiB,WAAwB,MAAM,IAAI,CAAC1B,KAAK,CAACsB,WAAW,CAACC,MAAMd,MAAMgB;gBACvEnB,IAAIM,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAACC,MAAMY;oBAAUX,SAAS;gBAAS;YAC5D,EAAC,OAAMC,OAAM;gBACTT,KAAKS;YACT;QACJ;QAEA,uBAAOW,cAAa,OAAOtB,KAAsBC,KAAeC,OAAsC;YAClG,IAAG;gBACC,MAAMW,UAAUC,OAAOd,IAAImB,IAAI,CAACd,EAAE;gBAClC,MAAMF,SAASH,IAAII,IAAI,CAACC,EAAE;gBAC1B,MAAMkB,YAAyB,MAAM,IAAI,CAAC5B,KAAK,CAAC2B,UAAU,CAACT,SAASV;gBACpEF,IAAIM,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAACC,MAAMc;oBAAWb,SAAS;gBAAM;YAC1D,EAAC,OAAMC,OAAM;gBACTT,KAAKS;YACT;QACJ;QAEA,uBAAOa,aAAY,OAAOxB,KAAsBC,KAAeC,OAAsC;YACjG,IAAG;gBACC,MAAMuB,OAAOzB,IAAImB,IAAI,CAACO,QAAQ;gBAC9B,MAAMvB,SAASH,IAAII,IAAI,CAACC,EAAE;gBAC1B,MAAMkB,YAAyB,MAAM,IAAI,CAAC5B,KAAK,CAAC6B,SAAS,CAACC,MAAMtB;gBAChEF,IAAIM,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAACC,MAAMc;oBAAWb,SAAS;gBAAQ;YAC5D,EAAC,OAAMC,OAAM;gBACTT,KAAKS;YACT;QACJ;QAEA,uBAAOgB,cAAa,OAAO3B,KAAsBC,KAAeC,OAAsC;YAClG,IAAG;gBACC,MAAMW,UAAUC,OAAOd,IAAIe,MAAM,CAACV,EAAE;gBACpC,MAAMF,SAASH,IAAII,IAAI,CAACC,EAAE;gBAC1B,MAAMqB,WAAmB,MAAM,IAAI,CAAC/B,KAAK,CAACgC,UAAU,CAACd,SAASV;gBAC9DF,IAAIM,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEC,MAAMiB;oBAAUhB,SAAS;gBAAQ;YAC5D,EAAC,OAAMC,OAAM;gBACTT,KAAKS;YACT;QACJ;;AACJ"}