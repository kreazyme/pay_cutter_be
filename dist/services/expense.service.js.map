{"version":3,"sources":["../../src/services/expense.service.ts"],"sourcesContent":["import { ExpenseEntity } from \"@/entities/expense.entity\";\r\nimport { GroupEntity } from \"@/entities/group.entity\";\r\nimport { UserEntity } from \"@/entities/users.entity\";\r\nimport { HttpException } from \"@exceptions/HttpException\";\r\nimport { Service } from \"typedi\";\r\nimport { EntityRepository, Repository } from \"typeorm\";\r\n\r\n@Service()\r\n@EntityRepository()\r\nexport class ExpenseService extends Repository<ExpenseEntity>{\r\n    public async findExpense(id: number): Promise<ExpenseEntity> {\r\n        // const findExpense: ExpenseEntity = await ExpenseEntity.findOne({ where: { id: id } });\r\n        const findExpense: ExpenseEntity = await ExpenseEntity\r\n            .getRepository()\r\n            .createQueryBuilder(\"expense_entity\")\r\n            .leftJoinAndSelect(\"expense_entity.toGroup\", \"toGroup\")\r\n            .leftJoinAndSelect(\"expense_entity.paidBy\", \"paidBy\")\r\n            .leftJoinAndSelect(\"expense_entity.participants\", \"participants\")\r\n            .leftJoinAndSelect(\"expense_entity.createdBy\", \"createdBy\")\r\n            .where(\"expense_entity.id = :id\", { id: id })\r\n            // .select([\r\n            //     \"expense_entity.id\",\r\n            //     \"expense_entity.name\",\r\n            //     \"expense_entity.description\",\r\n            //     \"expense_entity.amount\",\r\n            //     \"expense_entity.createdAt\",\r\n            //     \"expense_entity.updatedAt\",\r\n            //     \"expense_entity.imageURL\",\r\n            //     \"toGroup.id\",\r\n            //     \"toGroup.name\",\r\n            //     // \"paidBy.id\",\r\n            //     // \"paidBy.name\",\r\n            //     // \"paidBy.imageURL\",\r\n            //     \"participants.id\",\r\n            //     \"participants.email\",\r\n            //     // \"participants.imageURL\",\r\n            //     // \"createdBy.id\",\r\n            //     // \"createdBy.name\",\r\n            //     // \"createdBy.imageURL\",\r\n            // ])\r\n            .getOne();\r\n        return findExpense;\r\n    }\r\n\r\n    public async createExpense(\r\n        name: string,\r\n        description: string,\r\n        amount: number,\r\n        paidBy: number,\r\n        groupId: number,\r\n        participants: number[],\r\n        createBy: number,\r\n        imageURL: string,\r\n    ): Promise<ExpenseEntity> {\r\n        const findGroup: GroupEntity = await GroupEntity.findOne(groupId);\r\n        if(!findGroup) throw new HttpException(404, \"Group not found\");\r\n        let newParticipants: UserEntity[] = [];\r\n        console.log(participants.length);\r\n        participants.forEach(async (participant) => {\r\n            const findParticipant: UserEntity = await UserEntity.findOne(participant);\r\n            if (!findParticipant) throw new HttpException(404, \"Participant number\" + participant + \" not found\");\r\n            newParticipants.push(findParticipant);\r\n        });\r\n        const findPaidBy: UserEntity = await UserEntity.findOne(paidBy);\r\n        if(!findPaidBy) throw new HttpException(404, \"PaidBy not found\");\r\n        const findCreateBy: UserEntity = await UserEntity.findOne(createBy);\r\n        if(!findCreateBy) throw new HttpException(404, \"CreateBy not found\");\r\n        const newExpense: ExpenseEntity = new ExpenseEntity();\r\n        newExpense.name = name;\r\n        newExpense.description = description;\r\n        newExpense.amount = amount;\r\n        newExpense.paidBy = findPaidBy;\r\n        newExpense.toGroup = findGroup;\r\n        newExpense.participants = newParticipants;\r\n        newExpense.imageURL = imageURL;\r\n        newExpense.createdBy = findCreateBy;\r\n        await newExpense.save();\r\n        return newExpense;\r\n    }\r\n\r\n    public async getExpensesByGroup(groupId: number): Promise<ExpenseEntity[]> {\r\n        const findExpenses: ExpenseEntity[] = await ExpenseEntity\r\n            .getRepository()\r\n            .createQueryBuilder(\"expense_entity\")\r\n            .leftJoinAndSelect(\"expense_entity.paidBy\", \"paidBy\")\r\n            .leftJoinAndSelect(\"expense_entity.participants\", \"participants\")\r\n            .leftJoinAndSelect(\"expense_entity.createdBy\", \"createdBy\")\r\n            .where(\"expense_entity.toGroup = :id\", { id: 11 })\r\n            .getMany();\r\n        return findExpenses;\r\n    }\r\n\r\n    public async updateExpense(\r\n        id: number,\r\n        name: string,\r\n        description: string,\r\n        amount: number,\r\n        paidBy: number,\r\n        groupId: number,\r\n        participants: number[],\r\n        createBy: number,\r\n        imageURL: string,\r\n    ): Promise<ExpenseEntity> {\r\n        const findExpense: ExpenseEntity = await ExpenseEntity.findOne(id);\r\n        if(!findExpense) throw new HttpException(404, \"Expense not found\");\r\n        findExpense.name = name;\r\n        findExpense.description = description;\r\n        findExpense.amount = amount;\r\n        findExpense.paidBy = await UserEntity.findOne(paidBy);\r\n        findExpense.toGroup = await GroupEntity.findOne(groupId);\r\n        findExpense.participants = await UserEntity.findByIds(participants);\r\n        findExpense.createdBy = await UserEntity.findOne(createBy);\r\n        findExpense.imageURL = imageURL;\r\n        await findExpense.save();\r\n        return findExpense;\r\n    }\r\n}"],"names":["ExpenseService","Repository","findExpense","id","ExpenseEntity","getRepository","createQueryBuilder","leftJoinAndSelect","where","getOne","createExpense","name","description","amount","paidBy","groupId","participants","createBy","imageURL","findGroup","GroupEntity","findOne","HttpException","newParticipants","console","log","length","forEach","participant","findParticipant","UserEntity","push","findPaidBy","findCreateBy","newExpense","toGroup","createdBy","save","getExpensesByGroup","findExpenses","getMany","updateExpense","findByIds","Service","EntityRepository"],"mappings":"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"}