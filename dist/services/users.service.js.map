{"version":3,"sources":["../../src/services/users.service.ts"],"sourcesContent":["import { hash } from 'bcrypt';\r\nimport { EntityRepository, Repository } from 'typeorm';\r\nimport { Service } from 'typedi';\r\nimport { UserEntity } from '@entities/users.entity';\r\nimport { HttpException } from '@exceptions/HttpException';\r\nimport { User } from '@interfaces/users.interface';\r\nimport axios, { AxiosResponse } from 'axios';\r\n\r\n@Service()\r\n@EntityRepository()\r\nexport class UserService extends Repository<UserEntity> {\r\n  public async findAllUser(): Promise<User[]> {\r\n    const users: User[] = await UserEntity.find();\r\n    return users;\r\n  }\r\n\r\n  public async findUserById(userId: number): Promise<User> {\r\n    const findUser: User = await UserEntity.findOne({ where: { id: userId } });\r\n    if (!findUser) throw new HttpException(409, \"User doesn't exist\");\r\n\r\n    return findUser;\r\n  }\r\n\r\n  public async createUser(userData: User): Promise<User> {\r\n    var url = 'https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=' + userData.googleToken;\r\n    var user: User;\r\n    var response: AxiosResponse<any, any>;\r\n    try{\r\n      response = await axios.get(url);\r\n    }\r\n    catch(e){\r\n      if(e.response.status == 400){\r\n        throw new HttpException(409, \"Token doesn't match email\");\r\n      }\r\n      else throw new HttpException(409, \"Error\");\r\n    }\r\n    if (userData.email != response.data.email) throw new HttpException(409, \"Token doesn't match email\");\r\n    else {\r\n      var findUser: User = await UserEntity.findOne({ where: { email: userData.email } });\r\n      if(findUser == null){\r\n        const createUserData: User = await UserEntity.create({ ...userData }).save();\r\n        // findUser = createUserData;\r\n        return createUserData;\r\n      }\r\n      // user = findUser;\r\n      // return findUser;\r\n      return findUser;\r\n    }\r\n    // return user;\r\n    //  xmlHttp.open(\"GET\", url, true); // false for synchronous request\r\n    //  xmlHttp.send(null);\r\n    // xmlHttp.onreadystatechange = async function () {\r\n    //   // check if request is complete\r\n    //   if (xmlHttp.readyState === 4) {\r\n    //     // check if request is successful\r\n    //     if (xmlHttp.status === 200) {\r\n    //       // success\r\n    //       var response = JSON.parse(xmlHttp.responseText);\r\n    //       if (userData.email != response.email) {\r\n    //         throw new HttpException(409, \"Token doesn't match email\");\r\n    //       }\r\n    //       else {\r\n    //         console.log('Oke')\r\n    //         const findUser: User = await UserEntity.findOne({ where: { email: userData.email } });\r\n    //         // if (findUser) throw new HttpException(409, `This email ${userData.email} already exists`);\r\n\r\n    //         // const hashedPassword = await hash(userData.password, 10);\r\n    //         // const createUserData: User = await UserEntity.create({ ...userData, password: hashedPassword }).save();\r\n\r\n    //         return findUser;\r\n    //       }\r\n    //     } else {\r\n    //       // error\r\n    //       console.log(xmlHttp.statusText);\r\n    //       throw new HttpException(409, \"Token doesn't match email\");\r\n    //     }\r\n    //   }\r\n    // }\r\n    // xmlHttp.onerror = function (e) {\r\n    //   console.log(e)\r\n    // }\r\n  }\r\n\r\n  public async updateUser(userId: number, userData: User): Promise<User> {\r\n    const findUser: User = await UserEntity.findOne({ where: { id: userId } });\r\n    if (!findUser) throw new HttpException(409, \"User doesn't exist\");\r\n\r\n    await UserEntity.update(userId, { ...userData });\r\n\r\n    const updateUser: User = await UserEntity.findOne({ where: { id: userId } });\r\n    return updateUser;\r\n  }\r\n\r\n  public async deleteUser(userId: number): Promise<User> {\r\n    const findUser: User = await UserEntity.findOne({ where: { id: userId } });\r\n    if (!findUser) throw new HttpException(409, \"User doesn't exist\");\r\n\r\n    await UserEntity.delete({ id: userId });\r\n    return findUser;\r\n  }\r\n}\r\n"],"names":["UserService","Repository","findAllUser","users","UserEntity","find","findUserById","userId","findUser","findOne","where","id","HttpException","createUser","userData","url","googleToken","user","response","axios","get","e","status","email","data","createUserData","create","save","updateUser","update","deleteUser","delete","Service","EntityRepository"],"mappings":";;;;+BAUaA;;aAAAA;;yBATgC;wBACrB;6BACG;+BACG;gDAEO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAIxBA,cAAN,0BAA0BC,mBAAU;IACzC,MAAaC,cAA+B;QAC1C,MAAMC,QAAgB,MAAMC,uBAAU,CAACC,IAAI;QAC3C,OAAOF;IACT;IAEA,MAAaG,aAAaC,MAAc,EAAiB;QACvD,MAAMC,WAAiB,MAAMJ,uBAAU,CAACK,OAAO,CAAC;YAAEC,OAAO;gBAAEC,IAAIJ;YAAO;QAAE;QACxE,IAAI,CAACC,UAAU,MAAM,IAAII,4BAAa,CAAC,KAAK,sBAAsB;QAElE,OAAOJ;IACT;IAEA,MAAaK,WAAWC,QAAc,EAAiB;QACrD,IAAIC,MAAM,iEAAiED,SAASE,WAAW;QAC/F,IAAIC;QACJ,IAAIC;QACJ,IAAG;YACDA,WAAW,MAAMC,cAAK,CAACC,GAAG,CAACL;QAC7B,EACA,OAAMM,GAAE;YACN,IAAGA,EAAEH,QAAQ,CAACI,MAAM,IAAI,KAAI;gBAC1B,MAAM,IAAIV,4BAAa,CAAC,KAAK,6BAA6B;YAC5D,OACK,MAAM,IAAIA,4BAAa,CAAC,KAAK,SAAS;QAC7C;QACA,IAAIE,SAASS,KAAK,IAAIL,SAASM,IAAI,CAACD,KAAK,EAAE,MAAM,IAAIX,4BAAa,CAAC,KAAK,6BAA6B;aAChG;YACH,IAAIJ,WAAiB,MAAMJ,uBAAU,CAACK,OAAO,CAAC;gBAAEC,OAAO;oBAAEa,OAAOT,SAASS,KAAK;gBAAC;YAAE;YACjF,IAAGf,YAAY,IAAI,EAAC;gBAClB,MAAMiB,iBAAuB,MAAMrB,uBAAU,CAACsB,MAAM,CAAC,mBAAKZ,WAAYa,IAAI;gBAE1E,OAAOF;YACT,CAAC;YAGD,OAAOjB;QACT,CAAC;IAkCH;IAEA,MAAaoB,WAAWrB,MAAc,EAAEO,QAAc,EAAiB;QACrE,MAAMN,WAAiB,MAAMJ,uBAAU,CAACK,OAAO,CAAC;YAAEC,OAAO;gBAAEC,IAAIJ;YAAO;QAAE;QACxE,IAAI,CAACC,UAAU,MAAM,IAAII,4BAAa,CAAC,KAAK,sBAAsB;QAElE,MAAMR,uBAAU,CAACyB,MAAM,CAACtB,QAAQ,mBAAKO;QAErC,MAAMc,aAAmB,MAAMxB,uBAAU,CAACK,OAAO,CAAC;YAAEC,OAAO;gBAAEC,IAAIJ;YAAO;QAAE;QAC1E,OAAOqB;IACT;IAEA,MAAaE,WAAWvB,MAAc,EAAiB;QACrD,MAAMC,WAAiB,MAAMJ,uBAAU,CAACK,OAAO,CAAC;YAAEC,OAAO;gBAAEC,IAAIJ;YAAO;QAAE;QACxE,IAAI,CAACC,UAAU,MAAM,IAAII,4BAAa,CAAC,KAAK,sBAAsB;QAElE,MAAMR,uBAAU,CAAC2B,MAAM,CAAC;YAAEpB,IAAIJ;QAAO;QACrC,OAAOC;IACT;AACF;AA1FaR;IAFZgC,IAAAA,eAAO;IACPC,IAAAA,yBAAgB;GACJjC"}