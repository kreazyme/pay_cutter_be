{"version":3,"sources":["../../src/services/auth.service.ts"],"sourcesContent":["import { compare, hash } from 'bcrypt';\r\nimport { sign } from 'jsonwebtoken';\r\nimport { Service } from 'typedi';\r\nimport { EntityRepository, Repository } from 'typeorm';\r\nimport { SECRET_KEY } from '@config';\r\nimport { UserEntity } from '@entities/users.entity';\r\nimport { HttpException } from '@exceptions/HttpException';\r\nimport { DataStoredInToken, TokenData } from '@interfaces/auth.interface';\r\nimport { User } from '@interfaces/users.interface';\r\n\r\nconst createToken = (user: User): TokenData => {\r\n  const dataStoredInToken: DataStoredInToken = { id: user.id };\r\n  const secretKey: string = SECRET_KEY;\r\n  const expiresIn: number = 60 * 60 * 24 * 7 * 52;\r\n\r\n  return { expiresIn, token: sign(dataStoredInToken, secretKey, { expiresIn }) };\r\n}\r\n\r\nconst createCookie = (tokenData: TokenData): string => {\r\n  return `Authorization=${tokenData.token}; HttpOnly; Max-Age=${tokenData.expiresIn};`;\r\n}\r\n\r\n@Service()\r\n@EntityRepository()\r\nexport class AuthService extends Repository<UserEntity> {\r\n  public async signup(userData: User): Promise<User> {\r\n\r\n\r\n\r\n    const findUser: User = await UserEntity\r\n      .createQueryBuilder('user')\r\n      .where('user.email = :email', { email: userData.email })\r\n      .addSelect('user.password')\r\n      .getOne();\r\n    if (findUser) throw new HttpException(409, `This email ${userData.email} already exists`);\r\n\r\n    const hashedPassword = await hash(userData.password, 10);\r\n    const createUserData: User = await UserEntity.create({ ...userData, password: hashedPassword }).save();\r\n    return createUserData;\r\n  }\r\n\r\n  public async login(userData: User): Promise<{ cookie: string; findUser: User, token: string }> {\r\n    const findUser: User = await UserEntity\r\n      .createQueryBuilder('user')\r\n      .where('user.email = :email', { email: userData.email })\r\n      .addSelect('user.password')\r\n      .getOne();\r\n    if (!findUser) throw new HttpException(409, `This email ${userData.email} was not found`);\r\n\r\n    const isPasswordMatching: boolean = await compare(userData.password, findUser.password);\r\n    if (!isPasswordMatching) throw new HttpException(409, \"Password not matching\");\r\n\r\n    const tokenData = createToken(findUser);\r\n    const cookie = createCookie(tokenData);\r\n    const token = tokenData.token;\r\n\r\n    return { cookie, findUser, token };\r\n  }\r\n\r\n  public async logout(userData: User): Promise<User> {\r\n    // const findUser: User = await UserEntity.findOne({ where: { email: userData.email, password: userData.password } });\r\n    const findUser: User = await UserEntity\r\n      .createQueryBuilder('user')\r\n      .where('user.email = :email', { email: userData.email })\r\n      .where('user.password = :password', { password: userData.password })\r\n      .addSelect('user.password')\r\n      .getOne();\r\n    if (!findUser) throw new HttpException(409, \"User doesn't exist\");\r\n\r\n    return findUser;\r\n  }\r\n}\r\n"],"names":["AuthService","createToken","user","dataStoredInToken","id","secretKey","SECRET_KEY","expiresIn","token","sign","createCookie","tokenData","Repository","signup","userData","findUser","UserEntity","createQueryBuilder","where","email","addSelect","getOne","HttpException","hashedPassword","hash","password","createUserData","create","save","login","isPasswordMatching","compare","cookie","logout","Service","EntityRepository"],"mappings":";;;;+BAwBaA;;aAAAA;;wBAxBiB;8BACT;wBACG;yBACqB;wBAClB;6BACA;+BACG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAI9B,MAAMC,cAAc,CAACC,OAA0B;IAC7C,MAAMC,oBAAuC;QAAEC,IAAIF,KAAKE,EAAE;IAAC;IAC3D,MAAMC,YAAoBC,kBAAU;IACpC,MAAMC,YAAoB,KAAK,KAAK,KAAK,IAAI;IAE7C,OAAO;QAAEA;QAAWC,OAAOC,IAAAA,kBAAI,EAACN,mBAAmBE,WAAW;YAAEE;QAAU;IAAG;AAC/E;AAEA,MAAMG,eAAe,CAACC,YAAiC;IACrD,OAAO,CAAC,cAAc,EAAEA,UAAUH,KAAK,CAAC,oBAAoB,EAAEG,UAAUJ,SAAS,CAAC,CAAC,CAAC;AACtF;IAIaP,cAAN,0BAA0BY,mBAAU;IACzC,MAAaC,OAAOC,QAAc,EAAiB;QAIjD,MAAMC,WAAiB,MAAMC,uBAAU,CACpCC,kBAAkB,CAAC,QACnBC,KAAK,CAAC,uBAAuB;YAAEC,OAAOL,SAASK,KAAK;QAAC,GACrDC,SAAS,CAAC,iBACVC,MAAM;QACT,IAAIN,UAAU,MAAM,IAAIO,4BAAa,CAAC,KAAK,CAAC,WAAW,EAAER,SAASK,KAAK,CAAC,eAAe,CAAC,EAAE;QAE1F,MAAMI,iBAAiB,MAAMC,IAAAA,YAAI,EAACV,SAASW,QAAQ,EAAE;QACrD,MAAMC,iBAAuB,MAAMV,uBAAU,CAACW,MAAM,CAAC,wCAAKb;YAAUW,UAAUF;YAAkBK,IAAI;QACpG,OAAOF;IACT;IAEA,MAAaG,MAAMf,QAAc,EAA8D;QAC7F,MAAMC,WAAiB,MAAMC,uBAAU,CACpCC,kBAAkB,CAAC,QACnBC,KAAK,CAAC,uBAAuB;YAAEC,OAAOL,SAASK,KAAK;QAAC,GACrDC,SAAS,CAAC,iBACVC,MAAM;QACT,IAAI,CAACN,UAAU,MAAM,IAAIO,4BAAa,CAAC,KAAK,CAAC,WAAW,EAAER,SAASK,KAAK,CAAC,cAAc,CAAC,EAAE;QAE1F,MAAMW,qBAA8B,MAAMC,IAAAA,eAAO,EAACjB,SAASW,QAAQ,EAAEV,SAASU,QAAQ;QACtF,IAAI,CAACK,oBAAoB,MAAM,IAAIR,4BAAa,CAAC,KAAK,yBAAyB;QAE/E,MAAMX,YAAYV,YAAYc;QAC9B,MAAMiB,SAAStB,aAAaC;QAC5B,MAAMH,QAAQG,UAAUH,KAAK;QAE7B,OAAO;YAAEwB;YAAQjB;YAAUP;QAAM;IACnC;IAEA,MAAayB,OAAOnB,QAAc,EAAiB;QAEjD,MAAMC,WAAiB,MAAMC,uBAAU,CACpCC,kBAAkB,CAAC,QACnBC,KAAK,CAAC,uBAAuB;YAAEC,OAAOL,SAASK,KAAK;QAAC,GACrDD,KAAK,CAAC,6BAA6B;YAAEO,UAAUX,SAASW,QAAQ;QAAC,GACjEL,SAAS,CAAC,iBACVC,MAAM;QACT,IAAI,CAACN,UAAU,MAAM,IAAIO,4BAAa,CAAC,KAAK,sBAAsB;QAElE,OAAOP;IACT;AACF;AA/Caf;IAFZkC,IAAAA,eAAO;IACPC,IAAAA,yBAAgB;GACJnC"}