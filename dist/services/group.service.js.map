{"version":3,"sources":["../../src/services/group.service.ts"],"sourcesContent":["import { GroupEntity } from \"@/entities/group.entity\";\r\nimport { UserEntity } from \"@/entities/users.entity\";\r\nimport { User } from \"@/interfaces/users.interface\";\r\nimport { Service } from \"typedi\";\r\nimport { EntityRepository, Repository } from \"typeorm\";\r\nimport { HttpException } from '@exceptions/HttpException';\r\n\r\n@Service()\r\n@EntityRepository()\r\nexport class GroupService extends Repository<GroupEntity>{\r\n    public async findMyGroups(userID: number): Promise<GroupEntity[]> {\r\n        console.log(userID)\r\n        const groups: GroupEntity[] = await GroupEntity\r\n            .getRepository()\r\n            .createQueryBuilder(\"groups\")\r\n            .leftJoinAndSelect(\"groups.participants\", \"participants\")\r\n            .select([\r\n                \"groups.id\",\r\n                \"groups.name\",\r\n                \"groups.description\",\r\n                \"groups.createdAt\",\r\n                \"groups.updatedAt\",\r\n                \"participants.id\",\r\n                \"participants.email\",\r\n                \"participants.createdAt\",\r\n            ])\r\n            .getMany()\r\n        return groups;\r\n    }\r\n\r\n    public async findGroupById(groupID: number, userID: number,): Promise<GroupEntity> {\r\n        const findGroup: GroupEntity = await GroupEntity\r\n            .getRepository()\r\n            .createQueryBuilder(\"groups\")\r\n            .leftJoinAndSelect(\"groups.participants\", \"participants\")\r\n            .where(\"groups.id = :id\", { id: groupID })\r\n            .getOne();\r\n            if(findGroup === undefined){\r\n                throw new HttpException(404, \"Group not found\");\r\n            }\r\n        if (findGroup.participants.find((participant) => participant.id === userID)) {\r\n            return findGroup;\r\n        }\r\n        throw new HttpException(401, \"Unauthorized\");\r\n    }\r\n\r\n    public async createGroup(\r\n        groupName: string,\r\n        user: User,\r\n        description: string,\r\n    ): Promise<GroupEntity> {\r\n        const newGroup: GroupEntity = await GroupEntity.create({\r\n            name: groupName,\r\n            description: description,\r\n            participants: [user],\r\n        }).save();\r\n        return newGroup;\r\n    }\r\n\r\n    public async leaveGroup(groupID: number, userID: number): Promise<GroupEntity> {\r\n        console.log(groupID, userID)\r\n        const group: GroupEntity = await GroupEntity\r\n            .getRepository()\r\n            .createQueryBuilder(\"groups\")\r\n            .leftJoinAndSelect(\"groups.participants\", \"participants\")\r\n            .where(\"groups.id = :id\", { id: groupID })\r\n            .getOne();\r\n        if (group) {\r\n            // const findUser: UserEntity = await UserEntity.findOne({ where: { id: userID } });\r\n            if (group.participants.find((participant) => participant.id === userID)) {\r\n                // throw new HttpException(409, \"User already in group\");\r\n                group.participants = group.participants.filter((participant) => participant.id !== userID);\r\n                await group.save();\r\n                return group;\r\n            }\r\n            // group.participants.push(findUser);\r\n            // await group.save();\r\n            // return group;\r\n            throw new HttpException(404, \"User not in group\");\r\n        }\r\n        else {\r\n            throw new HttpException(404, \"Group not found\");\r\n        }\r\n    }\r\n\r\n    public async joinGroup(code: string, userID: number): Promise<GroupEntity> {\r\n        const group: GroupEntity = await GroupEntity\r\n            .getRepository()\r\n            .createQueryBuilder(\"groups\")\r\n            .leftJoinAndSelect(\"groups.participants\", \"participants\")\r\n            .where(\"groups.joinCode = :joinCode\", { joinCode: code })\r\n            .getOne();\r\n        if (group) {\r\n            const findUser: UserEntity = await UserEntity.findOne({ where: { id: userID } });\r\n            if (group.participants.find((participant) => participant.id === userID)) {\r\n                throw new HttpException(409, \"User already in group\");\r\n            }\r\n            group.participants.push(findUser);\r\n            await group.save();\r\n            return group;\r\n        }\r\n        else {\r\n            throw new HttpException(404, \"Group not found\");\r\n        }\r\n    }\r\n\r\n    public async shareGroup(groupID: number, userID: number): Promise<string> {\r\n        const findGroup: GroupEntity = await GroupEntity\r\n            .getRepository()\r\n            .createQueryBuilder(\"groups\")\r\n            .leftJoinAndSelect(\"groups.participants\", \"participants\")\r\n            .where(\"groups.id = :id\", { id: groupID })\r\n            .getOne();\r\n        if (findGroup === undefined) {\r\n            throw new HttpException(404, \"Group not found\");\r\n        }\r\n        if (findGroup.participants.find((participant) => participant.id === userID)) {\r\n            var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ123456789\"; //from where to create\r\n            var codeGen = \"\";\r\n            for (var i = 0; i < 12; i++)\r\n                codeGen += charset[Math.floor(Math.random() * charset.length)];\r\n            findGroup.joinCode = codeGen;\r\n            findGroup.joinCodeExpires = new Date(Date.now() + 1000 * 60 * 60 * 24 * 7);\r\n            await findGroup.save();\r\n            return codeGen;\r\n        }\r\n        throw new HttpException(401, \"Unauthorized\");\r\n    }\r\n}"],"names":["GroupService","Repository","findMyGroups","userID","console","log","groups","GroupEntity","getRepository","createQueryBuilder","leftJoinAndSelect","select","getMany","findGroupById","groupID","findGroup","where","id","getOne","undefined","HttpException","participants","find","participant","createGroup","groupName","user","description","newGroup","create","name","save","leaveGroup","group","filter","joinGroup","code","joinCode","findUser","UserEntity","findOne","push","shareGroup","charset","codeGen","i","Math","floor","random","length","joinCodeExpires","Date","now","Service","EntityRepository"],"mappings":"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"}