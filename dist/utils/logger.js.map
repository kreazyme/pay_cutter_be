{"version":3,"sources":["../../src/utils/logger.ts"],"sourcesContent":["import { existsSync, mkdirSync } from 'fs';\r\nimport { join } from 'path';\r\nimport winston from 'winston';\r\nimport winstonDaily from 'winston-daily-rotate-file';\r\nimport { LOG_DIR } from '@config';\r\n\r\n// logs dir\r\nconst logDir: string = join(__dirname, LOG_DIR);\r\n\r\nif (!existsSync(logDir)) {\r\n  mkdirSync(logDir);\r\n}\r\n\r\n// Define log format\r\nconst logFormat = winston.format.printf(({ timestamp, level, message }) => `${timestamp} ${level}: ${message}`);\r\n\r\n/*\r\n * Log Level\r\n * error: 0, warn: 1, info: 2, http: 3, verbose: 4, debug: 5, silly: 6\r\n */\r\nconst logger = winston.createLogger({\r\n  format: winston.format.combine(\r\n    winston.format.timestamp({\r\n      format: 'YYYY-MM-DD HH:mm:ss',\r\n    }),\r\n    logFormat,\r\n  ),\r\n  transports: [\r\n    // debug log setting\r\n    new winstonDaily({\r\n      level: 'debug',\r\n      datePattern: 'YYYY-MM-DD',\r\n      dirname: logDir + '/debug', // log file /logs/debug/*.log in save\r\n      filename: `%DATE%.log`,\r\n      maxFiles: 30, // 30 Days saved\r\n      json: false,\r\n      zippedArchive: true,\r\n    }),\r\n    // error log setting\r\n    new winstonDaily({\r\n      level: 'error',\r\n      datePattern: 'YYYY-MM-DD',\r\n      dirname: logDir + '/error', // log file /logs/error/*.log in save\r\n      filename: `%DATE%.log`,\r\n      maxFiles: 30, // 30 Days saved\r\n      handleExceptions: true,\r\n      json: false,\r\n      zippedArchive: true,\r\n    }),\r\n  ],\r\n});\r\n\r\nlogger.add(\r\n  new winston.transports.Console({\r\n    format: winston.format.combine(winston.format.splat(), winston.format.colorize()),\r\n  }),\r\n);\r\n\r\nconst stream = {\r\n  write: (message: string) => {\r\n    logger.info(message.substring(0, message.lastIndexOf('\\n')));\r\n  },\r\n};\r\n\r\nexport { logger, stream };\r\n"],"names":["logger","stream","logDir","join","__dirname","LOG_DIR","existsSync","mkdirSync","logFormat","winston","format","printf","timestamp","level","message","createLogger","combine","transports","winstonDaily","datePattern","dirname","filename","maxFiles","json","zippedArchive","handleExceptions","add","Console","splat","colorize","write","info","substring","lastIndexOf"],"mappings":";;;;;;;;;;;IAgESA,MAAM,MAANA;IAAQC,MAAM,MAANA;;oBAhEqB;sBACjB;kDACD;iEACK;wBACD;;;;;;AAGxB,MAAMC,SAAiBC,IAAAA,UAAI,EAACC,WAAWC,eAAO;AAE9C,IAAI,CAACC,IAAAA,cAAU,EAACJ,SAAS;IACvBK,IAAAA,aAAS,EAACL;AACZ,CAAC;AAGD,MAAMM,YAAYC,gBAAO,CAACC,MAAM,CAACC,MAAM,CAAC,CAAC,EAAEC,UAAS,EAAEC,MAAK,EAAEC,QAAO,EAAE,GAAK,CAAC,EAAEF,UAAU,CAAC,EAAEC,MAAM,EAAE,EAAEC,QAAQ,CAAC;AAM9G,MAAMd,SAASS,gBAAO,CAACM,YAAY,CAAC;IAClCL,QAAQD,gBAAO,CAACC,MAAM,CAACM,OAAO,CAC5BP,gBAAO,CAACC,MAAM,CAACE,SAAS,CAAC;QACvBF,QAAQ;IACV,IACAF;IAEFS,YAAY;QAEV,IAAIC,+BAAY,CAAC;YACfL,OAAO;YACPM,aAAa;YACbC,SAASlB,SAAS;YAClBmB,UAAU,CAAC,UAAU,CAAC;YACtBC,UAAU;YACVC,MAAM,KAAK;YACXC,eAAe,IAAI;QACrB;QAEA,IAAIN,+BAAY,CAAC;YACfL,OAAO;YACPM,aAAa;YACbC,SAASlB,SAAS;YAClBmB,UAAU,CAAC,UAAU,CAAC;YACtBC,UAAU;YACVG,kBAAkB,IAAI;YACtBF,MAAM,KAAK;YACXC,eAAe,IAAI;QACrB;KACD;AACH;AAEAxB,OAAO0B,GAAG,CACR,IAAIjB,gBAAO,CAACQ,UAAU,CAACU,OAAO,CAAC;IAC7BjB,QAAQD,gBAAO,CAACC,MAAM,CAACM,OAAO,CAACP,gBAAO,CAACC,MAAM,CAACkB,KAAK,IAAInB,gBAAO,CAACC,MAAM,CAACmB,QAAQ;AAChF;AAGF,MAAM5B,SAAS;IACb6B,OAAO,CAAChB,UAAoB;QAC1Bd,OAAO+B,IAAI,CAACjB,QAAQkB,SAAS,CAAC,GAAGlB,QAAQmB,WAAW,CAAC;IACvD;AACF"}